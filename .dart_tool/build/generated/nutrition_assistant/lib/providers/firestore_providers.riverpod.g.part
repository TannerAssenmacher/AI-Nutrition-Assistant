// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$firestoreHash() => r'ef4a6b0737caace50a6d79dd3e4e2aa1bc3031d5';

/// See also [firestore].
@ProviderFor(firestore)
final firestoreProvider = AutoDisposeProvider<FirebaseFirestore>.internal(
  firestore,
  name: r'firestoreProvider',
  debugGetCreateSourceHash:
      const bool.fromEnvironment('dart.vm.product') ? null : _$firestoreHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef FirestoreRef = AutoDisposeProviderRef<FirebaseFirestore>;
String _$firestoreFoodLogHash() => r'a21fdf2660c9821fa6a485644fb98de9230f3b98';

/// Copied from Dart SDK
class _SystemHash {
  _SystemHash._();

  static int combine(int hash, int value) {
    // ignore: parameter_assignments
    hash = 0x1fffffff & (hash + value);
    // ignore: parameter_assignments
    hash = 0x1fffffff & (hash + ((0x0007ffff & hash) << 10));
    return hash ^ (hash >> 6);
  }

  static int finish(int hash) {
    // ignore: parameter_assignments
    hash = 0x1fffffff & (hash + ((0x03ffffff & hash) << 3));
    // ignore: parameter_assignments
    hash = hash ^ (hash >> 11);
    return 0x1fffffff & (hash + ((0x00003fff & hash) << 15));
  }
}

abstract class _$FirestoreFoodLog
    extends BuildlessAutoDisposeStreamNotifier<List<FoodItem>> {
  late final String userId;

  Stream<List<FoodItem>> build(
    String userId,
  );
}

/// See also [FirestoreFoodLog].
@ProviderFor(FirestoreFoodLog)
const firestoreFoodLogProvider = FirestoreFoodLogFamily();

/// See also [FirestoreFoodLog].
class FirestoreFoodLogFamily extends Family<AsyncValue<List<FoodItem>>> {
  /// See also [FirestoreFoodLog].
  const FirestoreFoodLogFamily();

  /// See also [FirestoreFoodLog].
  FirestoreFoodLogProvider call(
    String userId,
  ) {
    return FirestoreFoodLogProvider(
      userId,
    );
  }

  @override
  FirestoreFoodLogProvider getProviderOverride(
    covariant FirestoreFoodLogProvider provider,
  ) {
    return call(
      provider.userId,
    );
  }

  static const Iterable<ProviderOrFamily>? _dependencies = null;

  @override
  Iterable<ProviderOrFamily>? get dependencies => _dependencies;

  static const Iterable<ProviderOrFamily>? _allTransitiveDependencies = null;

  @override
  Iterable<ProviderOrFamily>? get allTransitiveDependencies =>
      _allTransitiveDependencies;

  @override
  String? get name => r'firestoreFoodLogProvider';
}

/// See also [FirestoreFoodLog].
class FirestoreFoodLogProvider extends AutoDisposeStreamNotifierProviderImpl<
    FirestoreFoodLog, List<FoodItem>> {
  /// See also [FirestoreFoodLog].
  FirestoreFoodLogProvider(
    String userId,
  ) : this._internal(
          () => FirestoreFoodLog()..userId = userId,
          from: firestoreFoodLogProvider,
          name: r'firestoreFoodLogProvider',
          debugGetCreateSourceHash:
              const bool.fromEnvironment('dart.vm.product')
                  ? null
                  : _$firestoreFoodLogHash,
          dependencies: FirestoreFoodLogFamily._dependencies,
          allTransitiveDependencies:
              FirestoreFoodLogFamily._allTransitiveDependencies,
          userId: userId,
        );

  FirestoreFoodLogProvider._internal(
    super._createNotifier, {
    required super.name,
    required super.dependencies,
    required super.allTransitiveDependencies,
    required super.debugGetCreateSourceHash,
    required super.from,
    required this.userId,
  }) : super.internal();

  final String userId;

  @override
  Stream<List<FoodItem>> runNotifierBuild(
    covariant FirestoreFoodLog notifier,
  ) {
    return notifier.build(
      userId,
    );
  }

  @override
  Override overrideWith(FirestoreFoodLog Function() create) {
    return ProviderOverride(
      origin: this,
      override: FirestoreFoodLogProvider._internal(
        () => create()..userId = userId,
        from: from,
        name: null,
        dependencies: null,
        allTransitiveDependencies: null,
        debugGetCreateSourceHash: null,
        userId: userId,
      ),
    );
  }

  @override
  AutoDisposeStreamNotifierProviderElement<FirestoreFoodLog, List<FoodItem>>
      createElement() {
    return _FirestoreFoodLogProviderElement(this);
  }

  @override
  bool operator ==(Object other) {
    return other is FirestoreFoodLogProvider && other.userId == userId;
  }

  @override
  int get hashCode {
    var hash = _SystemHash.combine(0, runtimeType.hashCode);
    hash = _SystemHash.combine(hash, userId.hashCode);

    return _SystemHash.finish(hash);
  }
}

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
mixin FirestoreFoodLogRef
    on AutoDisposeStreamNotifierProviderRef<List<FoodItem>> {
  /// The parameter `userId` of this provider.
  String get userId;
}

class _FirestoreFoodLogProviderElement
    extends AutoDisposeStreamNotifierProviderElement<FirestoreFoodLog,
        List<FoodItem>> with FirestoreFoodLogRef {
  _FirestoreFoodLogProviderElement(super.provider);

  @override
  String get userId => (origin as FirestoreFoodLogProvider).userId;
}
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package
